@page "/process/{keyJson?}"

@code {
    [Parameter]
    public string? KeyJson { get; set; }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private DeploymentOrder Order { get; set; }
    private DeploymentOrder OrderCopy { get; set; }
    private DataManager dataManager = DataManager.Instance;

    private bool isNewModel = false;
    private string? initalKey;

    protected override void OnInitialized()
    {
        if (KeyJson != null)
        {
            string? key = JsonSerializer.Deserialize<string>(KeyJson);
            initalKey = key;

            Order = dataManager.State.DeploymentOrderMap[key ?? throw new ArgumentNullException()];
            OrderCopy = Order.DeepCopy();
        }
        else
        {
            Order = new();
            isNewModel = true;
        }
    }

    private void NavigateHome() => NavigationManager?.NavigateTo("/");
    private void BackClick() => NavigateHome();

    private void DeleteClick()
    {
        if (Order != null)
        {
            dataManager.RemoveProcess(Order);
            NavigateHome();
        }
    }

    private ProcessListDTO getDTO()
    {
        return new ProcessListDTO(Order, isNewModel, initalKey);
    }
}

<div class="process-builder">

    <div class="btn-container">
        <button class="btn-primary" @onclick="BackClick">Back</button>
        @if (Order != null)
        {
            <button class="btn-primary" @onclick="DeleteClick">Delete</button>
        }
    </div>

    <ProcessListComp DTO=@getDTO() />

</div>
