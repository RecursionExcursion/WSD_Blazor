@code {
    [Parameter]
    public ProcessListDTO TableDTO { get; set; }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private void NavigateHome() => NavigationManager?.NavigateTo("/");

    private DataManager dataManager = DataManager.Instance;

    private List<DeploymentParams> Params;
    private DeploymentOrder Order { get; set; }
    private bool IsNewModel { get; set; }
    private string? InitialKey { get; set; }

    protected override void OnInitialized()
    {
        Order = TableDTO.Order;
        IsNewModel = TableDTO.IsNewModel;
        InitialKey = TableDTO.InitialKey;
        Params = new List<DeploymentParams>(TableDTO.Order.DeepCopy().DeploymentParameters);
    }

    private void AddProcessClick()
    {
        var newParam = new DeploymentParams();
        newParam.Type = ProcessType.Url;
        Params.Add(newParam);
    }

    private void SubmitClick()
    {
        if (!string.IsNullOrEmpty(Order.Name))
        {
            Order.Name = Order.Name.Replace(" ", "");
            if (IsNewModel)
            {
                dataManager.AddNewProcess(Order);
            }
            else
            {
                Order.DeploymentParameters = Params;
                dataManager.UpdateProcess(
                    InitialKey ?? throw new NullReferenceException("IsNewModel must be true if key is null")
                , Order);
            }
            NavigateHome();
        }
    }

    private ProcessCreationDTO getDTO(DeploymentParams dp)
    {
        return new ProcessCreationDTO(dp, Params);
    }

    private void HandleChildStateChangeRemoveItemCallBack(DeploymentParams dp)
    {
        Params.Remove(dp);

        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Log relevant information for debugging
        System.Diagnostics.Debug.Print($"Params Count: {Params.Count}");
        int i = 0;
        foreach (var p in Params)
        {
            System.Diagnostics.Debug.Print($"Param: {i++}");
            System.Diagnostics.Debug.Print(p.Exe);
            System.Diagnostics.Debug.Print(p.Args);

        }

        base.OnAfterRender(firstRender);
    }
}

<div class="centered-content">
    <div class="outerDiv">
        <h2 class="subtitle">Processes</h2>

        <div class="processMenuDiv">
            <span>
                <label>Name: </label>
                <input @bind=Order.Name autocomplete="nope" />
            </span>
            <button class="btn-primary" @onclick="AddProcessClick">Add Process</button>
        </div>

        <div class="tableContainer processTableContainer">
            <table>
                <thead>
                </thead>
                <tbody>
                    @foreach (var dp in Params)
                    {
                        <ProcessListItem DP=dp NotifyParentOfStateChange=@HandleChildStateChangeRemoveItemCallBack />
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div>
        <button class="divrow btn-primary" @onclick="SubmitClick">Submit</button>
    </div>
</div>